[
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOConnection::exec($sql) should be compatible with PDO::exec(string $statement): int|false",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOConnection::lastInsertId($name = null) should be compatible with PDO::lastInsertId(?string $name = null): string|false",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOConnection::prepare($sql, $driverOptions = []) should be compatible with PDO::prepare(string $query, array $options = []): PDOStatement|false",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOConnection::quote($value, $type = Doctrine\\DBAL\\ParameterType::STRING) should be compatible with PDO::quote(string $string, int $type = PDO::PARAM_STR): string|false",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOQueryImplementation::query(?string $query = null, ?int $fetchMode = null, mixed ...$fetchModeArgs) should be compatible with PDO::query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs): PDOStatement|false",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOStatement::bindParam($param, &$variable, $type = Doctrine\\DBAL\\ParameterType::STRING, $length = null, $driverOptions = null) should be compatible with PDOStatement::bindParam(string|int $param, mixed &$var, int $type = PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null): bool",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOStatement::bindValue($param, $value, $type = Doctrine\\DBAL\\ParameterType::STRING) should be compatible with PDOStatement::bindValue(string|int $param, mixed $value, int $type = PDO::PARAM_STR): bool",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOStatement::closeCursor() should be compatible with PDOStatement::closeCursor(): bool",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOStatement::execute($params = null) should be compatible with PDOStatement::execute(?array $params = null): bool",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOStatement::fetch($fetchMode = null, $cursorOrientation = PDO::FETCH_ORI_NEXT, $cursorOffset = 0) should be compatible with PDOStatement::fetch(int $mode = PDO::FETCH_DEFAULT, int $cursorOrientation = PDO::FETCH_ORI_NEXT, int $cursorOffset = 0): mixed",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOStatement::fetchColumn($columnIndex = 0) should be compatible with PDOStatement::fetchColumn(int $column = 0): mixed",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\DBAL\\Driver\\PDOStatementImplementations::fetchAll($mode = null, ...$args) should be compatible with PDOStatement::fetchAll(int $mode = PDO::FETCH_DEFAULT, mixed ...$args): array",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\Persistence\\Reflection\\RuntimePublicReflectionProperty::getValue($object = null) should be compatible with ReflectionProperty::getValue(?object $object = null): mixed",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\Migration\\RoutingMigrationTest::testShouldRun",
        "message": "Declaration of Doctrine\\Persistence\\Reflection\\RuntimePublicReflectionProperty::setValue($object, $value = null) should be compatible with ReflectionProperty::setValue(mixed $objectOrValue, mixed $value = <default>): void",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\RoutingTest::testResolvesAliases",
        "message": "Since symfony/event-dispatcher 5.1: Symfony\\Component\\EventDispatcher\\LegacyEventDispatcherProxy is deprecated, use the event dispatcher without the proxy.",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\RoutingTest::testResolvesAliases",
        "message": "Declaration of Spatie\\SchemaOrg\\Graph::jsonSerialize() should be compatible with JsonSerializable::jsonSerialize(): mixed",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\RoutingTest::testResolvesAliases",
        "message": "Declaration of Spatie\\SchemaOrg\\BaseType::jsonSerialize() should be compatible with JsonSerializable::jsonSerialize(): mixed",
        "count": 1
    },
    {
        "location": "Contao\\CoreBundle\\Tests\\Functional\\RoutingTest::testResolvesAliases with data set \"Renders the page if the alias is \"index\" and the request is empty\"",
        "message": "The \"Scheb\\TwoFactorBundle\\Security\\Authentication\\RememberMe\\RememberMeServicesDecorator\" class implements \"Symfony\\Component\\Security\\Http\\Logout\\LogoutHandlerInterface\" that is deprecated since Symfony 5.1.",
        "count": 1
    }
]